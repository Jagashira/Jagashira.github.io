{"pageProps":{"projectData":{"id":"ysp-201-serial","title":"YSP-201 Serial Communication CLI Tool","image":"/projects/YSP-201.jpg","tech":["Python","Serial Communication"],"desc":"研究室のシリンジポンプ「YSP-201」を、独自のPPL言語より使いやすいコマンドで自動制御するPython CLIツール","repo":"https://github.com/Jagashira/Syringe-Pump-Pro","contentHtml":"<h2>課題と目的</h2>\n<p>所属していた流体研究室のシリンジポンプ「YSP-201」は、独自の**PPL（Pump Programming Language）**でプログラムを組むことができましたが、その言語は簡易的で、プログラムの作成や実行に手間がかかるという課題がありました。</p>\n<p>そこで、より直感的で効率的なコマンド体系を Python で独自に設計し、<strong>CLI（コマンドラインインターフェース）から手軽にポンプの複雑な動作をプログラム・実行できる</strong>スクリプトを開発しました。</p>\n<h2>主な機能と特徴</h2>\n<ul>\n<li>\n<p><strong>⌨️ 柔軟な CLI 操作</strong>\n<code>python implement.py --port COM3 --dia 14.5</code> のように、コマンドライン引数で接続ポートやシリンジの内径、流速などを柔軟に指定可能。これにより、様々な実験条件下でスクリプトを再利用できます。</p>\n</li>\n<li>\n<p><strong>🔄 シリアル通信による双方向制御</strong>\n<code>pySerial</code>ライブラリを利用し、PC と YSP-201 間のシリアル通信を確立。Python で記述したコマンドを、リアルタイムで PPL に変換してポンプへ送信します。</p>\n</li>\n<li>\n<p><strong>🧪 実験シーケンスの自動化</strong>\nPython の強力なプログラミング機能を活かし、「A 液を 10 分送液後、B 液を 5 分吸引する」といった複雑な一連の操作をスクリプトとして記述・実行可能にしました。</p>\n</li>\n</ul>\n<h2>工夫した点・技術的な挑戦</h2>\n<ul>\n<li>\n<p><strong>🔩 独自言語のラッパー開発</strong>\nPPL の仕様を解析し、それを抽象化するラッパーを Python で開発。利用者は PPL を意識することなく、より高水準なコマンドでポンプを制御できるようにしました。</p>\n</li>\n<li>\n<p><strong>🐍 Python によるスタンドアローンツール開発</strong>\nWeb 技術とは異なる、コマンドラインベースでのハードウェア制御に挑戦。Python の標準的なライブラリだけで、研究の効率を大幅に向上させる実用的なツールを完成させました。</p>\n</li>\n</ul>\n"}},"__N_SSG":true}